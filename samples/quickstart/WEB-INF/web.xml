<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" >

    <listener>
        <description>Creates a JSecurity SecurityManager instance and binds it to the ServletContext for
                     framework access and application use.</description>
        <listener-class>org.jsecurity.web.servlet.SecurityManagerListener</listener-class>
    </listener>

    <!-- ===================================================================
	 -  Servlets
	 -  =================================================================== -->
    <servlet>
        <servlet-name>sample</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <filter>
        <description>Ensures a SecurityContext exists for each request, utilizing the SecurityManager
                     bound to the webapp by the above SecurityManagerListener</description>
        <filter-name>SecurityContextFilter</filter-name>
        <filter-class>org.jsecurity.web.servlet.SecurityContextFilter</filter-class>
        <!-- Because JSecurity's Session management support is portable across
             servlet containers and can be used across
             client mediums (web app, swing app, etc), JSecurity provides its own implementation of the
             Servlet Specification for Sessions (Spec 2.4, Chapter 7) for transparent session management.
             As such, this Filter uses JSecurity Sessions by default instead of the Servlet container's session 
             implementation.  This is usually a good thing in enterprise applications that rely on JSecurity
             for shared session state.

             But if you require the servlet container's specific
             Session implementation for some reason, you should 1) Ask yourself why you've purposefully tied yourself
             to the servlet container and see if you can get away from that, or leverage JSecurity Sessions stated above
             to release you from this dependency, and 2) disable JSecurity sessions on the web-tier by uncommenting
             the following init-param.
        <init-param>
            <param-name>useJSecuritySessions</param-name>
            <param-value>false</param-value>
        </init-param> -->
    </filter>

    <filter-mapping>
        <filter-name>SecurityContextFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

	<!-- ===================================================================
	 -  Welcome file list
	 -  =================================================================== -->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

</web-app>

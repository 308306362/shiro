<?xml version="1.0"?>

<project name="jsecurity" default="dist">

    <!-- Static property definitions.  These will remain the same for any module or submodule. -->
    <property name="project.name" value="jsecurity"/>

    <property name="root.base.dir" value="${basedir}"/>

    <!-- application-wide config files: (all other config files should be in a respective
         module or submodule) -->
    <property name="root.etc.dir" value="${root.base.dir}/etc"/>
    <property name="root.dist.dir" value="${root.base.dir}/dist"/>

    <!-- version of the product, see http://apr.apache.org/versioning.html
         for details on this convention -->
    <property name="major.version" value="0"/>
    <property name="minor.version" value="1"/>
    <property name="patch.version" value="0"/>
    <property name="version" value="${major.version}.${minor.version}.${patch.version}"/>

    <!-- *RELATIVE* definitions.  These properties will reflect a directory structure relative
         to where the build is being executed -->
    <property name="base.dir" value="."/>
    <property name="etc.dir" value="${base.dir}/etc"/>
    <property name="src.dir" value="${base.dir}/src"/>
    <property name="test.dir" value="${base.dir}/test"/>
    <property name="build.dir" value="${base.dir}/build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="test.classes.dir" value="${build.dir}/test-classes"/>
    <property name="dist.dir" value="${build.dir}/dist"/>
    <property name="docs.dir" value="${build.dir}/docs"/>
    <property name="api.dir" value="${docs.dir}/api"/>
    <property name="test.docs.dir" value="${docs.dir}/test-reports"/>

    <!-- compile flags, can be overridden on the command line using the -D flag -->
    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize" value="true"/>

    <target name="root-prepare">
        <mkdir dir="${root.dist.dir}"/>
    </target>

    <target name="prepare">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${docs.dir}"/>
        <mkdir dir="${api.dir}"/>
        <mkdir dir="${test.docs.dir}"/>
    </target>

    <!-- ===================================================================
      -  Template target.  Never called explicitly, only used to pass target
      -  calls to the underlying children builds.
      -  =================================================================== -->
    <target name="template">
        <!-- This section defines the modules and the order in which they are
             executed for any given target.  This means ORDER MATTERS.
             Any dependencies that are to be satisified by one module for another
             must be declared in the order the dendencies occur. -->
        <ant dir="api" target="${target}"/>
        <ant dir="ri" target="${target}"/>

    </target>

    <!-- ===================================================================
      -  Clean all local and children build files
      -  =================================================================== -->
    <target name="clean">

        <!-- Clean all children builds: -->
        <antcall target="template">
            <param name="target" value="clean"/>
        </antcall>

        <!-- Clean local build: -->
        <delete dir="${root.dist.dir}"/>

    </target>


    <!-- ===================================================================
      -  compile-sources - default Java compile behavior for a submodule
      -  not used at the root level, but listed here so it can be shared
      -  by all submodules (since they import this file).
      -  =================================================================== -->
    <target name="compile.src" depends="prepare">
        <javac destdir="${classes.dir}"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               classpathref="compile.path">
            <src path="${src.dir}"/>
        </javac>
    </target>

    <!-- ===================================================================
      -  compile-test - default Java compile behavior for a submodule
      -  not used at the root level, but listed here so it can be shared
      -  by all submodules (since they import this file).
      -  =================================================================== -->
    <target name="compile.test" depends="prepare">
        <javac srcdir="${test.dir}"
               destdir="${test.classes.dir}"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               classpathref="test.path"/>
    </target>

    <!-- Compile all children modules and/or submodules -->
    <target name="compile" depends="root-prepare">
        <antcall target="template">
            <param name="target" value="compile"/>
        </antcall>
    </target>

    <!-- =================================================================== -->
    <!-- Javadoc all main sources                                            -->
    <!-- =================================================================== -->
    <target name="javadoc.api" depends="root-prepare">
        <echo message="Generating JavaDoc API for specification sources..."/>
        <mkdir dir="${root.dist.dir}/docs/spec-api"/>

        <javadoc packagenames="org.jsecurity.*"
                 destdir="${root.dist.dir}/docs/spec-api"
                 author="true"
                 version="true"
                 use="true"
                 windowTitle="JSecurity Specification API">
            <fileset dir="${root.base.dir}">
                <include name="api/src/**/*.java"/>
                <include name="ri/common/src/**/*.java"/>
                <include name="ri/business/src/**/*.java"/>
                <include name="ri/client/src/**/*.java"/>
            </fileset>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
    </target>

    <target name="javadoc.ri" depends="javadoc.api">
        <echo message="Generating JavaDoc API for reference implementation sources..."/>
        <mkdir dir="${root.dist.dir}/docs/ri-api"/>

        <javadoc packagenames="org.jsecurity.*"
                 destdir="${root.dist.dir}/docs/ri-api"
                 author="true"
                 version="true"
                 use="true"
                 windowTitle="JSecurity Reference Implementation API">
            <fileset dir="${root.base.dir}">
                <include name="ri/common/src/**/*.java"/>
                <include name="ri/business/src/**/*.java"/>
                <include name="ri/client/src/**/*.java"/>
            </fileset>
            <link href="file://${root.dist.dir}/docs/spec-api/"/>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Javadoc all source code                                             -->
    <!-- =================================================================== -->
    <target name="javadoc">
        <echo message="Generating JSecurity JavaDoc API..."/>
        <mkdir dir="${root.dist.dir}/docs/api"/>

        <javadoc packagenames="org.jsecurity.*"
                 destdir="${root.dist.dir}/docs/api"
                 author="true"
                 version="true"
                 use="true"
                 windowTitle="JSecurity Java API">
            <fileset dir="${root.base.dir}">
                <include name="api/src/**/*.java"/>
                <include name="ri/common/src/**/*.java"/>
                <include name="ri/business/src/**/*.java"/>
                <include name="ri/client/src/**/*.java"/>
            </fileset>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
            <link href="http://java.sun.com/j2ee/1.4/docs/api/"/>
            <link href="http://jakarta.apache.org/commons/logging/api/"/>
            <classpath>
                <pathelement location="${root.base.dir}/ri/lib/jakarta-commons/commons-logging.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="junit.check.warning" if="tests.failed">
        <echo>
        ***********************************************************
        * One or more unit tests failed!
        * Check the reports located in ${test.docs.dir}
        * for details...
        ***********************************************************
        </echo>
    </target>

    <!-- ===================================================================
      -  quick-test-report - quickly generates test report documentation based
      -  on the xml test reports previously created during a junit task
      -  execution. (this does not run the task).
      -  =================================================================== -->
    <target name="test.report" depends="prepare">
        <echo message="Generating test reports..."/>

        <junitreport todir="${test.docs.dir}">
            <fileset dir=".">
                <include name="**/TEST-*"/>
            </fileset>
            <report todir="${test.docs.dir}"/>
        </junitreport>
    </target>

    <target name="unit.tests" depends="compile">
        <echo message="Executing unit tests..."/>

        <!-- Any properties files needed by test cases and/or Spring test case
             configuration must be under the JDYN_ROOT hierarchy so relative
             file references may work properly.  -->
        <copy toDir="${classes.dir}" file="${root.base.dir}/etc/log4j.properties"/>
        <copy toDir="${classes.dir}" file="${root.base.dir}/db/build/gen/jdbc.properties"/>

        <junit printsummary="withOutAndErr"
               showoutput="true"
               haltonfailure="no"
               failureproperty="tests.failed"
               errorproperty="tests.failed"
               timeout="60000"
               fork="yes">
            <classpath refid="test.path"/>

            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/> <!-- allows us to generate web reports -->

            <batchtest fork="true" todir="${gen.dir}">
                <fileset dir="${test.classes.dir}">

                    <include name="**/*Test.class"/>

                    <exclude name="**/*IntegrationTest.class"/>
                    <exclude name="**/*SystemTest.class"/>
                    <exclude name="**/*StressTest.class"/>

                </fileset>
            </batchtest>

        </junit>

    </target>

    <target name="test" depends="dist">
        <antcall target="template">
            <param name="target" value="test"/>
        </antcall>
    </target>

    <!-- ===================================================================
         jar - not called from the master or module builds, but provided
         as a default convenience target for submodules to jar up
         their resources.  If a submodule has more complex requirements
         when creating their jar, it can override this task by
         defining a 'jar' target in its local build file.
         =================================================================== -->
    <target name="jar" depends="compile">
        <jar jarfile="${dist.jar}">
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="**/*.properties"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="**/*.gif"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="**/*.png"/>
            </fileset>
            <manifest>
				<attribute name="Implementation-Title"
                           value="${project.name}-${module.name}-${submodule.name}"/>
				<attribute name="Implementation-Version" value="${version}"/>
				<attribute name="${project.name}-Version" value="${version}"/>
			</manifest>
        </jar>
    </target>

    <target name="composite-jars" depends="root-prepare">
        <path id="jarjar.path">
            <pathelement location="${root.base.dir}/ri/lib/jarjar/jarjar.jar"/>
        </path>
        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpathref="jarjar.path"/>

        <jarjar jarfile="${root.dist.dir}/${project.name}-business.jar">
            <zipfileset src="${root.dist.dir}/${project.name}-api.jar"/>
            <zipfileset src="${root.dist.dir}/${project.name}-ri-common.jar"/>
            <zipfileset src="${root.dist.dir}/${project.name}-ri-business.jar"/>
            <manifest>
				<attribute name="Implementation-Title"
                           value="${project.name}"/>
				<attribute name="Implementation-Version" value="${version}"/>
				<attribute name="${project.name}-Version" value="${version}"/>
			</manifest>
        </jarjar>

        <jarjar jarfile="${root.dist.dir}/${project.name}-client.jar">
            <zipfileset src="${root.dist.dir}/${project.name}-api.jar"/>
            <zipfileset src="${root.dist.dir}/${project.name}-ri-common.jar"/>
            <zipfileset src="${root.dist.dir}/${project.name}-ri-client.jar"/>
            <manifest>
				<attribute name="Implementation-Title"
                           value="${project.name}"/>
				<attribute name="Implementation-Version" value="${version}"/>
				<attribute name="${project.name}-Version" value="${version}"/>
			</manifest>
        </jarjar>

        <jarjar jarfile="${root.dist.dir}/${project.name}.jar">
            <zipfileset src="${root.dist.dir}/${project.name}-api.jar"/>
            <zipfileset src="${root.dist.dir}/${project.name}-ri-common.jar"/>
            <zipfileset src="${root.dist.dir}/${project.name}-ri-business.jar"/>
            <zipfileset src="${root.dist.dir}/${project.name}-ri-client.jar"/>
            <manifest>
				<attribute name="Implementation-Title"
                           value="${project.name}"/>
				<attribute name="Implementation-Version" value="${version}"/>
				<attribute name="${project.name}-Version" value="${version}"/>
			</manifest>
        </jarjar>

    </target>



    <!-- ===================================================================
   dist - calls the "dist" target for all modules.  All modules are
          required to have this defined as it creates a module's
          artifacts (jars, wars, etc).
   =================================================================== -->
    <target name="dist" depends="root-prepare">
        <antcall target="template">
            <param name="target" value="dist"/>
        </antcall>
        <antcall target="composite-jars"/>
        <!-- copy over the readme file in the dist directory so people understand
             what the files do: -->
        <copy toDir="${root.dist.dir}" file="${root.etc.dir}/README.txt"/>
    </target>

    <target name="release" depends="dist,javadoc">
        <property name="release.zip.name" value="${project.name}-${version}-with-dependencies.zip"/>
        <zip destfile="${root.dist.dir}/${release.zip.name}"
             basedir="${basedir}"
             excludes="**/CVS/*,**/build/**,**/${release.zip.name}"/>
    </target>

    <!-- ===================================================================
      -  all - everything
      -  =================================================================== -->
    <target name="all" depends="dist"/>

</project>

